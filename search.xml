<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[T118870期望]]></title>
    <url>%2F2020%2F03%2F02%2FT118870%E6%9C%9F%E6%9C%9B%2F</url>
    <content type="text"><![CDATA[题目描述你在一个无穷大的二维平面上，可以进行移动。每次移动可以向上、下、左、右四个方向移动一个格子。比如当前的坐标为 $(0,0)$，移动一次后可以到达 $(0,1)(0,-1)(-1,0)(1,0)$四个坐标中的一个。 初始时你在 $(0,0)$，现在随机移动 $n$ 次，求：期望可以访问多少个不同的点。 可以证明，答案乘以 $4^n$ 是一个整数，你只需要输出答案乘以 $4^n$ 再模 $998244353$ 的结果即可。 输入格式一行一个整数$n$，意义如上所述。 输出格式一行一个整数，表示答案。 数据范围$n \le 10^5$ Sol.设$f[i]$为走$i$步且当前所在的点是第一次走到的方案数，$g[i]$为走$i$步回到原点的方案数。 由定义可得 g(x)=\left\{ \begin{aligned} & 0 (x =0(mod 2))\\ & (C_{2x}^{x})^2 (x=1(mod2))\\ \end{aligned} \right.证明参考here f[i] = 4^i - \sum_{j=0}^{i} f[j]\times g[i-j]边界$f[0] = g[0] = 1$ Ans = \sum_{i=0}^{n} f[i] \times4^{n - i}分治$FFT$或者多项式求逆即可。这里介绍多项式求逆的方法： 设$F(x)$为$f$数组的生成函数，设$G(x)$为$g$数组的生成函数，$H(x)=\sum_{i=0}^{\infty}4^ix^i$ F(x) * G(x) = \sum_{i=0}^{\infty}\sum_{j=0}^{\infty}f[i]g[i]x^{i + j}设$k = i + j$ F(x) * G(x) =\sum_{k=0}^{\infty}\sum_{i=0}^{\infty}f[k]g[k-i]x^{i + j} H(x) - F(x)G(x) = F(x) F(x) = \frac{H(x)}{G(x)+1}]]></content>
      <tags>
        <tag>FFT</tag>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈珂朵莉树]]></title>
    <url>%2F2020%2F03%2F02%2F%E6%B5%85%E8%B0%88%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[珂朵莉树(ODT)大致定义：用$map/set$把一个序列中相同的一段数字压缩成一个点。由其定义可以知道珂朵莉树的适用范围：题目中必须有区间赋值操作且数据随机。 实现方式：1.建树：123struct chthollyTree &#123; map &lt;int , int&gt; s; &#125;; 在$map$ 中我们只记录一段连续的数中最右边一个没了。 2.基本操作求下标为$x$的值123I int find(int x) &#123; return s.lower_bound(x) -&gt; second&#125; 将$x$位置分裂1234inline void split(int p) &#123; int pos = find(p); s[p] = pos;&#125; 由于有时候询问或修改的区间是在一个连续段中的，没有记录在$map$中，所以在对其进行操作之前要提取这个区间$[l,r]$1234567891011#define it map&lt;int,int&gt;::iteratorinline pair&lt;it , it&gt; range(int l,int r) &#123; split(l - 1) , split(r); return make_pair( s.find(l - 1) , s.find(r) );&#125;``` 修改某个区间(区间加)```cpppair &lt;it , it&gt; border = T.range(l , r);st = border.first , ed = border.second;while(st != ed) ed -&gt; second += x , ed -- ; 计算某个区间的一些东西123456int nxt;for(ri i = l ; i &lt;= r ; i = nxt + 1) &#123; it now = T.s.lower_bound(i); nxt = min(r , now -&gt; first); //calc...&#125; 例题BZOJ4592CF986C洛谷P2572(本题被洛谷卡了，BZOJ上能过)]]></content>
      <tags>
        <tag>珂朵莉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[整体二分学习笔记]]></title>
    <url>%2F2020%2F03%2F02%2F%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[整体二分就是把操作和询问放在一起二分的一种离线算法。整体二分通常解决含有修改和查询第$k$大/小的问题。具体来讲，整体二分将所有询问分为左侧有用和右侧有用两个集合递归的处理这两个集合，同时不断的缩小答案区间，得出答案。例题： [ZJOI2013]K大数查询code：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#include&lt;bits/stdc++.h&gt;using namespace std;#define int long long#define I inline#define lc x &lt;&lt; 1#define rc x &lt;&lt; 1 | 1#define ri register int#define For(i , x , y) for(ri i = x ; i &lt;= y ; ++ i)#define Next(i , x) for(ri i = head[x] ; i ; i = e[i].nxt)inline int read() &#123; int s = 0 , w = 1; char ch = getchar(); while(ch &lt; 48 || ch &gt; 57) &#123;if(ch == '-') w = -1; ch = getchar();&#125; while(ch &gt;= 48 &amp;&amp; ch &lt;= 57) s = (s &lt;&lt; 1) + (s &lt;&lt; 3) + (ch ^ 48) , ch = getchar(); return s * w;&#125;const int N = 1e5 + 5;int n , m , ans[N] , seg[N &lt;&lt; 2] , tag[N &lt;&lt; 2];struct Querys &#123; int opt , l , r , k , id;&#125; q[N] , q1[N] , q2[N];I void pushup(int x) &#123; seg[x] = seg[lc] + seg[rc];&#125;I void pushdown(int x , int L , int R) &#123; int mid = (L + R) &gt;&gt; 1; seg[lc] += tag[x] * (mid - L + 1); seg[rc] += tag[x] * (R - mid); tag[lc] += tag[x]; tag[rc] += tag[x]; tag[x] = 0;&#125;I void modify(int x , int l , int r , int L , int R , int val) &#123; if(l &lt;= L &amp;&amp; R &lt;= r) &#123; seg[x] += (R - L + 1) * val ; tag[x] += val; return ; &#125; int mid = (L + R) &gt;&gt; 1; pushdown(x , L , R); if(l &lt;= mid) modify(lc , l , r , L , mid , val); if(r &gt; mid) modify(rc , l , r , mid + 1 , R , val); pushup(x);&#125;I int query(int x , int l , int r , int L , int R) &#123; if(l &lt;= L &amp;&amp; R &lt;= r) return seg[x]; int mid = (L + R) &gt;&gt; 1 , res = 0; pushdown(x , L , R); if(l &lt;= mid) res += query(lc , l , r , L , mid); if(r &gt; mid) res += query(rc , l , r , mid + 1 , R); return res;&#125;int cur[N];I void solve(int front , int last , int l , int r) &#123; if(front &gt; last || l &gt; r) return ; if(l == r) &#123; For(i , front , last) if(q[i].opt == 2) ans[q[i].id] = l; return ; &#125; int mid = (l + r) &gt;&gt; 1; For(i , front , last) &#123; if(q[i].opt == 1 &amp;&amp; q[i].k &gt; mid) modify(1 , q[i].l , q[i].r , 1 , n , 1); else if(q[i].opt == 2) cur[i] = query(1 , q[i].l , q[i].r , 1 , n); &#125; For(i , front , last) if(q[i].opt == 1 &amp;&amp; q[i].k &gt; mid) modify(1 , q[i].l , q[i].r , 1 , n , -1); int t1 = 0 , t2 = 0; For(i , front , last) if(q[i].opt == 2) &#123; if(cur[i] &gt;= q[i].k) q2[t2 ++ ] = q[i]; // mid偏小 else &#123; // mid偏大 r = mid - 1 q[i].k -= cur[i]; q1[t1 ++] = q[i]; &#125; &#125; else &#123; if(q[i].k &lt;= mid) q1[t1 ++] = q[i]; else q2[t2 ++] = q[i]; // q[i].k &lt;= mid mid增加 ， q[i].k 肯定没用 &#125; For(i , 0 , t1 - 1) q[front + i] = q1[i]; For(i , 0 , t2 - 1) q[front + t1 + i] = q2[i]; solve(front , front + t1 - 1 , l , mid); solve(front + t1 , last , mid + 1 , r);&#125;signed main() &#123; n = read() , m = read(); int tot = 0; For(i , 1 , m) &#123; q[i].opt = read() , q[i].l = read() , q[i].r = read() , q[i].k = read(); if(q[i].opt == 2) q[i].id = tot ++ ; &#125; solve(1 , m , 0 , n); For(i , 0 , tot - 1) printf("%lld\n" , ans[i]); return 0;&#125; 总结：整体二分实际上是在时间维度上形成了一颗决策树，树上的每一个节点对应一个操作集合，每个操作集合需要对线段树操作，其实是另一种版本的树套树。]]></content>
      <tags>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欧拉反演入门]]></title>
    <url>%2F2020%2F03%2F02%2F%E6%AC%A7%E6%8B%89%E5%8F%8D%E6%BC%94%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[欧拉函数$\phi(i)$定义：在数论，对正整数n，欧拉函数是小于或等于n的正整数中与n互质的数的数目。 形式化地$\phi(n) = n\prod(1 - \frac{1}{p_i})$.欧拉函数的重要性质： \sum_{d|n} \phi(d) = n作者不会证明 证明略。 \sum_{i = 1}^{n}\sum_{j = 1}^{n}[gcd(i,j) = 1] = 2 \sum_{i=1}^{n} \phi(i) - 1有了这两个重要性质，就可以进行欧拉反演了。 例1：(bzoj4804)求 \sum_{i = 1}^{n}\sum_{j = 1}^{n} \phi(gcd(i , j))solution： 原式 $ =\sum_{i = 1}^{n}\sum_{j = 1}^{n}\sum_{d=1}^{n}\phi(d)[gcd(i , j) = d]$ $ =\sum_{d = 1}^{n}\phi(d)\sum_{i= 1}^{n/d}\sum_{j=1}^{n/d}[gcd(i , j) = 1]$ $ =\sum_{d = 1}^{n}\phi(d)(2\sum_{i=1}^{n/d}\phi(i) - 1)$ 线性筛 + 整除分块即可时间复杂度$O(n + \sqrt n)$]]></content>
      <tags>
        <tag>数学</tag>
        <tag>欧拉反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常系数非线性齐次递推学习笔记]]></title>
    <url>%2F2020%2F03%2F02%2F%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%9D%9E%E7%BA%BF%E6%80%A7%E9%BD%90%E6%AC%A1%E9%80%92%E6%8E%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[这个东西的用处通常是在非线性的时间内求出这样的式子： f_i = \sum_{j=1}^{k} f_{i-j}\times g_j 容易想到一个普通的矩阵乘法，时间复杂度$O(k^3logk)$但是，有时候这样的复杂度是不够的，于是我们需要优化。 前置知识：特征值，特征向量，特征多项式 特征值：若存在常数$\lambda$和向量$\vec{v}$，满足$\lambda A = \vec{v}A$，则称$\lambda $是$A$的特征值，$\vec{v}$是$A$的一组特征向量。 特征多项式：将上式变形得到$(\lambda I-\vec{v})A=0$($I$是单位矩阵)。那么$f(x) = det(\lambda I-\vec{v})$是矩阵的特征多项式。其中， $det()$ 为行列式函数。 那么，特征多项式到底有什么用呢？ 首先设$M$为矩阵乘法中的递推矩阵，目标求出$M^n$。 设$f(x)$为$M$的$k$次的特征多项式 设$M^n = f(M)g(M)+R(M)$，其中$R(M)$的次数小于等于$k-1$ 根据Cayley-Hamilton定理（由于在下太菜不会证明，就当是个结论用吧）$f(M)=O$ 所以上式只剩一个$R(M)$,这不就是个多项式取模嘛。 所以我们就可以把矩阵乘法变成多项式乘法和多项式取模了。 用暴力乘法和取模时间复杂度$O(k^2logk)$运用$FFT$和多项式求逆时间复杂度$O(klog^2k)$ 特征多项式的求法：根据定义,$ f(x)=det(xI - M) $ ，可以得到一个矩阵。将矩阵的第一列展开得到$f(x) = x^k - a_1x^k-1 - …-a_k$ 至此，算法结束。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;bits/stdc++.h&gt;using namespace std;#define ll long long#define I inline#define ri register int#define For(i, x, y) for (ri i = x; i &lt;= y; ++i)#define Next(i, x) for (ri i = head[x]; i; i = e[i].nxt)I int read() &#123; int s = 0, w = 1; char ch = getchar(); while (ch &lt; 48 || ch &gt; 57) &#123; if (ch == '-') w = -1; ch = getchar(); &#125; while (ch &gt;= 48 &amp;&amp; ch &lt;= 57) s = (s &lt;&lt; 1) + (s &lt;&lt; 3) + (ch ^ 48), ch = getchar(); return s * w;&#125;const int P = 998244353, N = 4010;int n, k, Ans, f[N], h[N];struct Mat &#123; int a[N]; Mat() &#123; memset(a, 0, sizeof(a)); &#125; int &amp;operator[](const int &amp;i) &#123; return a[i]; &#125; I int operator[](const int &amp;i) const &#123; return a[i]; &#125; I Mat operator*(const Mat &amp;rhs) const &#123; Mat ret; For(i , 0 , k - 1) For(j , 0 , k - 1) ret[i + j] = (ret[i + j] + 1ll * a[i] * rhs[j] % P) % P; for (int i = 2 * k - 2; i &gt;= k; ret.a[i--] = 0) For(j, 1, k) ret[i - j] = (ret[i - j] + 1ll * ret[i] * f[j - 1] % P) % P; return ret; &#125;&#125; res;Mat qpow(Mat a, int b) &#123; Mat ret; ret[0] = 1; for (; b; a = a * a, b &gt;&gt;= 1) if (b &amp; 1) ret = ret * a; return ret;&#125;signed main() &#123; n = read(), k = read(); For(i , 0 , k - 1) f[i] = read(); For(i , 0 , k - 1) h[i] = read(); if (n &lt; k) &#123; printf("%d\n", h[n]); return 0; &#125; res[1] = 1; Ans = 0; res = qpow(res, n); For(i , 0 , k - 1) printf("%d " , res[i]) ; putchar('\n'); For(i, 0, k - 1) Ans = (Ans + 1ll * res[i] * h[i] % P) % P; cout &lt;&lt; Ans &lt;&lt; endl; return 0;&#125; 由于多项式版本通常用不到我懒得写，所以就不写了。]]></content>
      <tags>
        <tag>向量</tag>
        <tag>矩阵</tag>
        <tag>常系数线性齐次递推</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二项式反演入门]]></title>
    <url>%2F2020%2F03%2F02%2F%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[比较常见的表达方式： 如果 f_n = \sum_{i = 0}^{n}\binom{n}{i}g_i则有 g_n = \sum_{i = 0}^{n}(-1)^{n-i}\binom{n}{i}f_i 证明直接代入就行了，这里懒得写 不写 经典应用——错排问题： 题面 设$f_i$为$i$各位置不变的方案数，则有： n! = \sum_{i = 0}^{n} \binom{n}{i}f_i直接套反演公式： f_n = \sum_{i = 0}^{n} (-1)^{n + i}\binom{n}{i}i!无脑拆开组合数化简得 f_n = n!\sum_{i=0}^{n} \frac{(-1)^i}{i!}其实错排问题也可以线性递推，这里不介绍了。 例题：BZOJ3622 设$f_i$表示恰好的方案数，$g_i$表示至少的方案数，则有 g_k = \sum_{i = k}^{n} \binom{i}{k} f_i反演一下可得 f_k = \sum_{i = k}^{n} (-1)^{n-i}\binom{i}{k} g_i然后考虑一下$g_i$怎么求，其实很简单，先将数组排序，设$dp[i][j]$为前$i$个数字，至少有$j$个$a &gt; b$的方案数，$dp$一下就好了。]]></content>
      <tags>
        <tag>二项式反演</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈约数个数函数]]></title>
    <url>%2F2020%2F03%2F02%2F%E6%B5%85%E8%B0%88%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[顾名思义就是一个数的约数个数。首先它是一个积性函数，这个就不用证明了。 线性筛法：开一个辅助数组记录下最小质因子的次数，记为$g(i)$。 当$ prime_j | i $ 时 $d(i \times prime_j) = d(i) / (g(i) + 1) \times (g(i) + 2)$ $ g(i * prime_j) = g(prime_j) + 1$ 否则$d(i \times prime_j) = d(i) \times d(prime_j)$$g(i \times prime_j) = 1$ 杜教筛法： 众所周知，杜教筛的结论是 g(1)S(n) = \sum_{i=1}^{n}h(i)-\sum_{d=2}^{n}g(d)S(\lfloor \frac{n}{d} \rfloor)其中$h = f * g$ , $f$是要筛的函数。 我们发现这里$g$可以选择$\mu$ 因为$d * \mu = \sum_{e|n} d(e)\mu(\lfloor \frac{n}{e} \rfloor) = 1 $ 莫比乌斯函数再杜教筛筛出来就好了]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二次剩余学习笔记]]></title>
    <url>%2F2020%2F03%2F02%2F%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言:这篇文章主要是写给我自己看的，所以比较简略。 若存在实数$x,n,p$,满足 x ^2 \equiv n \mod p则称$n$是$x$在模$p$意义下的二次剩余。 以下默认$p$ 是奇素数 结论1：上述方程在$1 \le n \le p -1$的情况下有$\frac{p-1}{2}$个不同$n$使得上述方程有实数根。 证明1：考虑两个不相等的解$x_0 , x_1$ , 那么 x_0 ^ 2 \equiv x_1^2 \mod p (x_1+x_0)(x_1-x_0)\equiv 0 \mod p \because p \not | (x_1 - x_0) \therefore p | (x_0 + x_1)$x_0,x_1$两两一组，共有$\frac{p - 1}{2}$组。 \because p | (x_0 + x_1) \therefore (x_0 + x_1) \equiv 0 \mod p所以，对于一个$n$若方程有解，则两个解互为相反数。 接下来考虑如何判断一个数$n$是不是二次剩余,意思就是同余方程$x^2 \equiv n \mod p $实数根。 欧拉准则 结论2：若$n^{\frac{p-1}{2}} \equiv 1 \mod p $，则$n$是二次剩余。反之，若$n^{\frac{p-1}{2}} \equiv -1 \mod p $，就不是。 给个不太严谨草率的证明： 根据费马小定理 x ^{p-1} \equiv 1 \mod p如果$n$是$x$的二次剩余那么$n ^{\frac{p-1}{2}} \equiv (x^2) ^ {\frac{p-1}{2}} \equiv x ^ {p-1} \equiv 1$ 说明$n^{\frac{p-1}{2}} \equiv 1 \mod p $是$n$为二次剩余的充分条件。 我们直入正题——如何求二次剩余。 Cipplla算法 随机一个数$a$,使得$a^2 - n$不是二次剩余，容易发现找到满足条件的数的期望次数是2次。 我们将实数域推广到复数域，钦定$i \equiv a^2 - n \mod p , i\in \mathbb{C}$ 结论3： $(a + i) ^ {p + 1} \equiv n \mod p$ (到了这一步，如果你不想看下面的证明你就可以直接去写代码了。) 证明3： 引理1：$i^p \equiv -i \mod p$ i^p \equiv i(i^2)^{\frac{p-1}{2}} \equiv i(a^2 - n)^{\frac{p-1}{2}} \equiv -i \mod p引理2：$(A + B)^p \equiv A^p + B^p \mod p$ 证明的话直接二项式定理展开，发现中间的项模$p$都是0，只剩下首尾两项。 (a + i)^{p + 1} \equiv (a^p + i^p)(a + i) \equiv (a-i)(a+i) \equiv a^2 - i^2 \equiv n \mod p终于证完了。 上代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;using namespace std;#define int long long#define I inline#define ri register int#define For(i , x , y) for(ri i = x ; i &lt;= y ; ++ i)#define Next(i , x) for(ri i = head[x] ; i ; i = e[i].nxt)I int read() &#123; int s = 0 , w = 1; char ch = getchar(); while(ch &lt; 48 || ch &gt; 57) &#123;if(ch == '-') w = -1; ch = getchar();&#125; while(ch &gt;= 48 &amp;&amp; ch &lt;= 57) s = (s &lt;&lt; 1) + (s &lt;&lt; 3) + (ch ^ 48) , ch = getchar(); return s * w;&#125;int P , imuli;struct co &#123; int real , imag; co (int x = 0 , int y = 0) &#123;real = x , imag = y;&#125;&#125;;I bool operator == (co x , co y) &#123; return x.real == y.real &amp;&amp; x.imag == y.imag;&#125;I co operator * (co x , co y) &#123; return co ((x.real * y.real + imuli * x.imag % P * y.imag) % P , (x.imag * y.real + x.real * y.imag) % P);&#125;I co qpow(co x , int y) &#123; co res = 1; for( ; y ; x = x * x , y &gt;&gt;= 1 ) if(y &amp; 1) res = res * x ; return res;&#125;bool chk(int x) &#123; return qpow(x , (P - 1) &gt;&gt; 1ll) == 1;&#125;void solve(int n , int P , int &amp;x0 , int &amp;x1) &#123; int a = rand() % P; while(!a || chk((a * a + P - n ) % P )) a = rand() % P; imuli = (a * a + P - n) % P; x0 = (int)(qpow(co(a , 1) , (P + 1) &gt;&gt; 1).real); x1 = P - x0 ; &#125;int T;signed main() &#123; srand(time(NULL)); T = read(); while(T --) &#123; int n = read() , x1 = 0 , x0 = 0; P = read(); if(n == 0) &#123; printf("0\n"); continue; &#125; if(!chk(n % P)) &#123; puts("Hola!"); continue; &#125; solve(n , P , x0 , x1); if(x0 &gt; x1) swap(x0 , x1); if(x0 == x1) printf("%lld\n" , x0); else printf("%lld %lld\n" , x0 , x1); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>二次剩余</tag>
        <tag>同余</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第二类斯特林数学习笔记]]></title>
    <url>%2F2020%2F03%2F02%2F%E7%AC%AC%E4%BA%8C%E7%B1%BB%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[第二类斯特林数$S_2(n , k)$表示将$n$个元素划分成$m$个非空无标号集合的方案数。 由此可得递推式 ： S_2(n , k) = S_2(n - 1 , k - 1) + S_2(n - 1 ,k- 1) \times k枚举$i$个集合是空的，容斥一下可得其展开式: S_2(n , k) = \frac{1}{k!} \sum_{i=0}^{k} (-1)^i\binom{k}{i}(k - i) ^n化简得 S_2(n , k) = \sum_{i=0}^{k} \frac{(-1)^i}{i!} \times \frac{(k - i) ^ n}{(k - i)!}这其实是一个卷积式，可以$FFT$的那种。 考虑生成函数 F(x) = \sum_{i=0}\frac{(-1)^i}{i!}x ^i G(x) = \sum_{i=0}\frac{i ^ n}{i!} x ^ i则 S_2(x) = F(x) * G(x)顺便可以过洛谷P5395 code : 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;bits/stdc++.h&gt;using namespace std;#define int long long#define I inline#define ri register int#define For(i , x , y) for(ri i = x ; i &lt;= y ; ++ i)#define Next(i , x) for(ri i = head[x] ; i ; i = e[i].nxt)I int read() &#123; int s = 0 , w = 1; char ch = getchar(); while(ch &lt; 48 || ch &gt; 57) &#123;if(ch == '-') w = -1; ch = getchar();&#125; while(ch &gt;= 48 &amp;&amp; ch &lt;= 57) s = (s &lt;&lt; 1) + (s &lt;&lt; 3) + (ch ^ 48) , ch = getchar(); return s * w;&#125;const int N = 1e6 + 5 , P = 167772161;int n , F[N] , G[N] , eps[N] , ieps[N] , fac[N] , ifac[N]; I int qpow(int x , int y) &#123; int ans = 1 , res = x; while(y) &#123; if(y &amp; 1) ans = (ans * res) % P; y &gt;&gt;= 1 ; res = (res * res) % P; &#125; return ans;&#125;I int inv(int x) &#123; return qpow(x , P - 2);&#125;I void trans(int n, int x[], int w[]) &#123; for (int i = 0, j = 0; i &lt; n; i++) &#123; if (i &lt; j) std::swap(x[i], x[j]); for (int l = n &gt;&gt; 1; (j ^= l) &lt; l; l &gt;&gt;= 1); &#125; for (int i = 2; i &lt;= n; i &lt;&lt;= 1) &#123; int l = i &gt;&gt; 1, d = n / i; for (int j = 0; j != n; j += i) &#123; for (int k = 0; k &lt; l; k++) &#123; int t = x[j + k + l] * w[d * k] % P; x[j + k + l] = (x[j + k] - t + P) % P; x[j + k] = (x[j + k] + t) % P; &#125; &#125; &#125;&#125;I void dft(int n, int x[]) &#123; trans(n, x, eps);&#125;I void idft(int n, int x[]) &#123; trans(n, x, ieps); int in = inv(n); for (int i = 0; i &lt; n ; i ++) x[i] = x[i] * in % P;&#125;signed main() &#123; n = read(); fac[0] = ifac[0] = 1 ; For(i , 1 , n) fac[i] = fac[i - 1] * i % P ; For(i , 1 , n) ifac[i] = inv(fac[i]) ; For(i , 0 , n) &#123; F[i] = ifac[i] ; if(i &amp; 1) F[i] = (P - F[i] ) % P ; &#125; For(i , 0 , n) &#123; G[i] = qpow(i , n) * ifac[i] % P ; &#125; //For(i , 0 , n) printf("%lld " , G[i]) ; putchar('\n'); int l = 1 ; while(l &lt;= n + n + 2) l &lt;&lt;= 1; eps[0] = ieps[0] = 1; int g = qpow(3 , (P - 1) / l) , ig = inv(g); For(i , 1 , l - 1) eps[i] = eps[i - 1] * g % P , ieps[i] = ieps[i - 1] * ig % P; dft(l , F) ; dft(l , G); For(i , 0 , l - 1) F[i] = F[i] * G[i] % P; idft(l , F); For(i , 0 , n) printf("%lld " , F[i]) ; putchar('\n'); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>第二类斯特林数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些琐事]]></title>
    <url>%2F2019%2F04%2F04%2F20190404%2F</url>
    <content type="text"><![CDATA[输入密码，查看文章 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[八下化学]]></title>
    <url>%2F2019%2F03%2F31%2F%E5%85%AB%E4%B8%8B%E5%8C%96%E5%AD%A6%2F</url>
    <content type="text"><![CDATA[八下第二单元部分 部分元素核电荷数、名称及其符号1氢H 2氦He 3锂Li 4铍Be 5硼B 6碳C 7氮N 8氧O 9氟F 10氖Ne 11钠Na 12镁Mg 13铝Al 14硅Si 15磷P 16硫S 17氯Cl 18氩Ar 19钾K 20钙Ca 21钪(kàng) Sc 22钛Ti 23钒(fán) V 24铬(gè) Cr 25锰Mn 26铁Fe 27钴(gǔ) Co 28镍(niè) Ni 29铜Cu 30锌Zn 31镓(jiā) Ga 32锗(zhě) Ge 33砷(shēn) As 34硒Se 35溴Br 36氪Kr 47银Ag 50锡Sn 53碘I 56钡Ba 74钨W 79金Au 80汞Hg 82铅Pb 第一主族：锂钠钾铷(Rb)铯(Cs)钫(Fr). 稀有气体：氦氖氩氪氙(Xe)氡(Rn). 卤族气体：氟氯溴碘砹(At). 部分元素常见化合价钾 钠 银 氢 +1价 氟 氯 溴 碘 -1价 钙 镁 钡 锌 +2价 1 2铜 2 3铁 2 4碳 -2氧 3铝 4硅 5磷 4 7锰 -2 4 6硫 -3 5氮 原子团氢氧根离子 OH- -1 硫酸根离子 SO42- -2 硝酸根离子 NO3- -1 碳酸根离子 CO32- -2 碳酸氢根离子 HCO3- -1 铵根离子 NH4+ +1 氯酸根离子 ClO3- -1 锰酸根离子 MnO42- -2（Mn显+6价） 高锰酸根离子 MnO4- -1（Mn显+7价） 磷根离子 PO43- -3 部分元素相对原子质量(近似值)H：1 C：12 N：14 O：16 S：32 Fe：56 He：4 F：19 Na：23 Al：27 Ca：40 其他α:关于微粒半径比较(1) 电子层数越多，半径越大。如：K&gt;Na (2) 电子层数相同时，再比较核电荷数，核电荷数越多，半径越小。如：S2-&gt;Cl-&gt;K+&gt;Ca2+ (3) 核电荷数相同时，比较电子数，电子越多半径越大。如：Cl-&gt;Cl β:原子轨道排布(1) S能级的有一条原子轨道(球形对称)。 (2) P能级的原子轨道是纺锤形的,每个P能级有3个原子轨道,它们相互垂直,分别以Px，Py，PZ表示。 (3) d能级的原子轨道有5个。 (一条轨道2个电子) (4)电子排布式：如Ca。K层最多排2个电子，表示为1S2；L层最多排8个电子，表示为2S22P6；M层最多排8个电子，表示为3S23P6。故电子排布式为1S22S22P63S23P6。 (5) 原子轨道是指一定能级上的电子,在核外空间运动的一个空间区域. (6) 泡利原理（能量最低原理）：S、p、d、f能级分别有1、3、5、7个轨道，每个轨道最多能容纳的电子数为2个，且自旋方向相反。 (7) 举例说明洪特规则：当电子排布在同一能级的不同轨道时，总是首先单独占一个轨道（即分占不同的轨道），而且自旋方向相同。洪特规则的第二条：当一个能级上的电子填充达到全充满，半充满或全空时是一种稳定状态，使得体系的能量较低。 (8) 钠的电子排布式可写成[Ne]3S1。因为前两层1S22S22P6电子数相加正好为Ne的原子序数。 γ:关于第一电离能(1) 定义:气态(基态)原子失去(第)一个电子形成+1价气态阴离子所需的最低能量叫做元素的第一电离能，符号为I1，单位是KJ·mol-1。(1mol=6.02*1023个电子)(2) 第一电离能越小，原子越容易失去电子；第一电离能越大，原子越不容易失去电子，金属性越弱；第一电离能反映了原子失去一个电子的难易程度；原子越稳定，电离能越大。(3) 类似的，还有第二电离能(从+1价气态阳离子再失一个电子所需要的能量，符号I2)，I3，I4等。(4) 第一电离能的周期性逆变规律是原子半径、核外电子排布周期性变化的结果。(5) 规律一：同主族元素第一电离能从上到下逐渐减小。原因：同主族元素从上到下，随核电荷数增大，原子半径逐渐增大，原子核对核外电子的吸引力逐渐减小，原子失电子能力逐渐增大，第一电离能逐渐减小。(6) 规律二：同周期元素第一电离能从左到右有增大的趋势。原因：同周期元素从左到右，原子半径逐渐减小，原子核对核外电子的吸引力逐渐增大，原子失电子能力逐渐减小，第一电离能有逐渐增大的趋势。(7) 铍的第一电离能比硼大，氮的第一电离能比氧大。特殊： I1（Be）&gt;I1（B），I1（N）&gt;I1（O） I1（Mg）&gt;I1（Al），I1（P）&gt;I1（S）Be 的外围电子排布为2s2，是全充满结构，比较稳定，而B的价电子排布为2s22p1。N的价电子排布2s22p3为半充满状态，比O的2s22p4 稳定，所以第一电离能比较大。ⅡA &gt; ⅢA ⅤA &gt; ⅥAns2 ns2np1 ns2np3 ns2np4(8) 规律三：同一周期第一电离能最小的是碱金属元素，最大的是稀有气体元素。原因：碱金属元素核外电子排布为ns1，同周期中（除稀有气体）原子半径最大，易失去一个电子，形成稳定结构，因此第一电离能在同周期中最小。稀有气体最外层电子排布为ns2np6，已达稳定结构，难以失电子，因此第一电离能在同周期中最大。(9) 影响电离能大小的因素：1、原子核对核外电子的引力。原子核吸引电子能力越强，I1越大。反之越小。2、原子达到稳定结构的趋势原子外围电子排布达到半满、全满或全空能量较低较稳定。I1反常， I1数值较大。(10) 电离能的应用：1、判断金属性强弱。2、判断元素的主要化合价。3、证明原子核外电子是分层排布的。 δ:化学式的意义设A1是一个化学式(用元素符号和数字表示物质的式子)。 (1) 若A是一种非金属元素（非稀有气体），那么A表示：1、A元素； 2、一个A原子。 例：H表示一个氢原子和氢元素。 (2) 若A是一种金属或稀有气体，那么A表示：1、A元素； 2、一个A原子； 3、A物质。 例：Fe表示铁元素，一个铁原子和铁物质。 (3) 5Cl只能表示5个氯原子；5Cl2只能表示5个氯分子。(4) H2O表示：1、水这种物质； 2、一个水分子； 3、水是由氢元素和氧元素组成的； 4、表示一个水分子是由一个氧原子和两个氢原子构成的。 (5) 2H+表示两个氢离子。ε:化学键(1) 通常把分子或晶体中，相邻原子（或离子）间强烈的相互作用称为化学键。 (2) 化学键分类：按原子之间相互作用的方式和强度不同，将化学键又分为离子键、共价键和金属键。 (3) 离子键： 1、定义：像氯化钠这样阴、阳离子间通过静电作用所形成的化学键叫离子键； 2、成键粒子：阴、阳离子； 3、成键性质：静电作用。含有离子键的化合物就是离子化合物。 (4) 形成离子键的条件： 1、活泼的金属元素（IA，IIA）和活泼的非金属元素（VIA，VIIA）之间的化合物； 2、活泼的金属元素和酸根离子形成的盐酸根离子：SO42-、NO3-、Cl-等； 3、铵根离子和酸根离子（或活泼非金属元素）形成的盐。把NH4+看作是活泼的金属阳离子。 (5) 共价键定义：原子间通过共用电子对形成的相互作用。含有共价键的化合物就是共价化合物。 (6) 共价键表示式： 1、电子式 i) HCl的电子式 . . H:Cl: . . ii) Cl2的电子式 .. . . :Cl:Cl: .. . . 2、结构式：用一根短线表示一对共用电子，其他电子一律省去。 如:H-Cl Cl-Cl. (7) 共价键分为： 1、非极性共价键：相同元素原子之间形成的共价键。如H2、O2分子中的共价键就是非极性键。 2、极性共价键：不同元素原子之间形成的共价键，成键原子的电负性不相等，共用电子对会偏向，这种叫做极性共价键，简称极性键。如HCl、H2O。 ζ:杂(1) 静电作用形成化合物。 (2) 元素的化学性质主要决定于原子的最外层电子数。 (3) H是指所有构成它的原子的原子核中有一个质子的物质。 (4) 地球上含量前五元素：O,Si,Al,Fe,Ca；人体当中含量前四元素：O,C,H,N. (5) 有机物：含C，有活性。 (6) 相对原子质量=m碳原子/12。(取原子核中有6个质子和6个中子的碳原子) (7) 带负电的离子叫阴离子。如Cl﹣、OH-、CO32-、SO42-；带正电的离子叫阳离子。如Na﹢、Mg2+、Fe2+。 八下第三单元部分一、部分气体性质和用途1.氮气物理性质：无色、无味的气体。难溶于水，熔沸点低。密度：1.251g/L 化学性质：不能燃烧、不能支持燃烧 用途：冷冻剂 制氮肥 化工原料 食品充气包装 保护气 2.稀有气体性质：稀有气体无色、无味，化学性质很不活泼。 用途：保护气、电光源激光技术、低温麻醉 3.氧气的用途供给呼吸、支持燃烧（气焊，炼钢，气割等） 二、氧气1.氧气在空气中含量的测定(拉瓦锡实验)(1) 银色液态汞连续加热12天，发现部分汞变成红色粉末（氧化汞）。汞槽中水银上升钟罩剩余空间的1/5。拉瓦锡得出空气是由氧气和氮气组成，其中氧气占总体积的1/5的结论。 (2) 现代氧气在空气中含量测定方法：红磷与空气中的氧气反应生成固体五氧化二磷，消耗氧气。发出黄光，冒出大量白烟，生成白色固体。打开弹簧夹后，水顺着导管流入集气瓶， 进入集气瓶中水的体积约瓶内空间的1/5。 2.氧气的性质(1)色、味、态：在通常情况下是无色、无味的气体 (2)密度：密度比空气略大（标准状况下） (3)水溶性：不易溶于水 (4)三态变化：无色气体，蓝色液体，淡蓝色雪花状固体 3.氧化燃烧：(1) 木炭燃烧： 点燃 木炭+氧气 ——-&gt; 二氧化碳 在空气中：发出红光，放出热量，燃烧后生成能使澄清石灰水变浑浊的气体。 在氧气中：发出白光，放出热量，燃烧后生成能使澄清石灰水变浑浊的气体。 (2) 镁燃烧： 点燃 2Mg+O2=点燃=2MgO 在空气里：发出耀眼的白光，放出热量，生成白色固体 在氧气里：剧烈燃烧，发出耀眼的白光，放出热量，生成白色固体 (3) 硫燃烧：硫+氧气 ——&gt; 二氧化碳 在空气里：发出微弱的淡蓝色火焰，放出热量，生成有刺激性气味的气体。 在氧气里：发出明亮的蓝紫色火焰，放出热量，生成有刺激性气味的气体。 硫在氧气里燃烧，为什么集气瓶底要留少量水？——溶解吸收生成的二氧化硫，防止二氧化硫逸出污染环境。 (4) 铁燃烧：3Fe+2O2=点燃=Fe3O4 在空气里：铁丝不能燃烧，发生红热现象。 在氧气里： 铁丝剧烈燃烧，火星四射， 放出热量，生成黑色固体。 (5) 红磷燃烧： 现象：红磷燃烧，产生大量白烟 实验说明：空气中氧气的体积约占总体积的1/5 故障分析：测出O₂的体积 &lt; 1/5 的原因 1、红磷量不足 2、氧气未耗尽 3、气密性不佳，使外界空气进入瓶内 4、未冷却到室温就打开止水夹 测出O₂的体积 &gt; 1/5 的原因 1、点燃红磷后，插入瓶内后该瓶盖太慢，使瓶中气体受热膨胀，部分空气逸出 2、实验开始时，没夹紧止水夹 4.装置的作用：（1）火柴的作用：引燃铁丝 （2）将铁丝绕成螺旋状：增大铁丝的受热面积 （3）待火柴即将燃尽时再将铁丝伸入氧气瓶中：防止火柴燃烧消耗过多氧气而使铁丝不能顺利燃烧 （4）预先在集气瓶中装少量水或在瓶底铺一薄层细沙：防止生成物溅落炸裂集气瓶底 （5）铁丝在氧气中燃烧实验中集气瓶中的少量水作用是：防止生成的熔化物溅落炸裂瓶底． (6) 硫在氧气里燃烧，为什么集气瓶底要留少量水目的是溶解吸收生成的二氧化硫，防止二氧化硫逸出污染环境。 (7) 红磷燃烧实验中在集气瓶中装细沙的原因：红磷燃烧放出大量的热，放置瓶底受热不均而炸裂 【讨论】 物质在空气中燃烧与在氧气中燃烧现象一样么？这说明了什么？1 同种物质在氧气中燃烧程度比在空气中剧烈。 说明：物质在空气中燃烧，实际上是与其中的氧气发生反应，氧气浓度越高，反应越剧烈 2碳，硫在空气中的燃烧程度比铁剧烈。 说明：碳，硫比铁的化学性质活泼 5.氧气与其他物质的反应（1）钾4K+O2=2K2O2K+O2=K2O2K+O2=KO2（超氧化钾） （2）钠4Na+O2=2Na2O (3) 铝4Al+3O2=点燃=2Al2O3 三、二氧化碳学校没讲到，先不更新了]]></content>
      <categories>
        <category>文化课</category>
      </categories>
      <tags>
        <tag>文化课</tag>
        <tag>化学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to write a blog]]></title>
    <url>%2F2019%2F03%2F30%2Fmy-first-blog%2F</url>
    <content type="text"><![CDATA[怎么写blog？？？ First of all执行 cd到你的bloghexo new ‘my-first-blog’ lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
